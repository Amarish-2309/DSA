link:-
Solution:-
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
int res=0;
int getDiameter(TreeNode* root,int start){
          if(root == NULL)
            return 0;
        
        if(root->val == start) {
            res = getHeight(root)-1;
            return -1;
        }
         int left = getDiameter(root->left, start);
        int right = getDiameter(root->right, start);

        if(left >=0 && right >= 0) {
            return max(left, right)+1;
        }
        
        if(left < 0) {
            res = max(right - left, res);
            return --left;
        }
        
        res = max(left - right , res);
        return --right;



}
        int getHeight(TreeNode* root){
        if(root == NULL)
            return 0;
         return max(getHeight(root->left), getHeight(root->right))+1;
         }


    int amountOfTime(TreeNode* root, int start) {
        if(root->left == NULL && root->right == NULL)
            return 0;
        
        if(root->val == start){
            return getHeight(root)-1;
        }
        
        res = 0;
        
        getDiameter(root, start);
        
        return res;
    }
};
