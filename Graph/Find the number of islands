Link:- https://practice.geeksforgeeks.org/problems/find-the-number-of-islands/0
Solution:-
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
//   void dfs(vector<vector<char>>& grid, vector<vector<int>&vis,int i,int j){
//       vis[i][j]={0};
//       for(auto it)
//   }


void bfs(vector<vector<char>>& grid, vector<vector<int>>&vis,int i,int j){
vis[i][j]=1;
    queue<pair<int,int>>q;
    q.push({i,j});
    int n= grid.size();
        int m=grid[0].size();
    while(!q.empty()){
        int i=q.front().first;
        int j=q.front().second;
        q.pop();
        for(int deli=-1;deli<=1;deli++){
            for(int delj=-1;delj<=1;delj++){
                int ni=i+deli;
                int nj=j+delj;
                if(ni>=0 && ni<n && nj>=0 && nj<m && grid[ni][nj]=='1' && !vis[ni][nj])
                {
                    vis[ni][nj]=1;
                    q.push({ni,nj});
                }
            }
        }
    } 
}
  
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int n= grid.size();
        int m=grid[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        int cnt=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]=='1'){
                cnt++;
                bfs(grid,vis,i,j);
                }
            }
        }
        return cnt;
    }
};

int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}
// } Driver Code Ends
